/*********************************************************

 Following is the TreeNode structure:

 class TreeNode {
     int data;
     TreeNode left;
     TreeNode right;
     TreeNode() {
         this.data = 0;
         this.left = null;
         this.right = null;
     }
     TreeNode(int data) {
         this.data = data;
         this.left = null;
         this.right = null;
     }
     TreeNode(int data, TreeNode left, TreeNode right) {
         this.data = data;
         this.left = left;
         this.right = right;
     }
 };
 ********************************************************/

import java.util.*;

class Pair {
    TreeNode node;
    int num;

    Pair(TreeNode node, int num) {
        this.node = node;
        this.num = num;
    }
}

public class Solution {
    public static List<List<Integer>> getTreeTraversal(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        Stack<Pair> st = new Stack<Pair>();
        List<Integer> pre= new ArrayList<>();
        List<Integer> in=new ArrayList<>();
        List<Integer> post= new ArrayList<>();
        st.push(new Pair(root,1));
        if(root == null){
            return ans;
        }
        while(!st.isEmpty()){
            Pair it = st.pop();

            if(it.num == 1){
                pre.add(it.node.data);
                it.num++;
                st.push(it);

                if(it.node.left !=null){
                    st.push(new Pair(it.node.left,1));
                }
            }

            else if(it.num==2){
                in.add(it.node.data);
                it.num++;
                st.push(it);

                if(it.node.right != null){
                    st.push(new Pair(it.node.right,1));
                }



            }
            else if(it.num==3){
                post.add(it.node.data);
            }
        }
        ans.add(in);
        ans.add(pre);
        ans.add(post);
        return ans;

        

        // Write your code here.
    }
}
